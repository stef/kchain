#!/usr/bin/ksh
#    This file is part of kchain

#    kchain is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    kchain is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with kchain.  If not, see <http://www.gnu.org/licenses/>.

# (C) 2012 by Stefan Marsiske, <stefan.marsiske@gmail.com>

# depends on pmount, dbus-monitor


MOUNTDIR=/media
kchain_path="$(realpath ${0%/*})"

source ~/.kchainrc 2>/dev/null
source .kchainrc 2>/dev/null

function add {
    set -x
    name="$1"; uuid="$2"
    # is it already mounted?
    mountpoint -q "$MOUNTDIR/$name" && return
    [[ -e "$MOUNTDIR/$name" ]] || sudo mkdir -p "$MOUNTDIR/$name"
    # try to cryptsetup, retry once
    SUDO_ASKPASS=/usr/bin/ssh-askpass sudo -A sh -c \
        "ssh-askpass 'Enter key for unlocking USB' | pmount -t ext2 -r /dev/disk/by-uuid/$uuid $MOUNTDIR/$name" ||
       SUDO_ASKPASS=/usr/bin/ssh-askpass sudo -A sh -c \
           "ssh-askpass 'Enter key for unlocking USB' | pmount -t ext2 -r /dev/disk/by-uuid/$uuid $MOUNTDIR/$name" ||
       return
    # needed for cleanup
    echo "$uuid $name" >>"$CACHEDIR/dev"
    if [ -d "$MOUNTDIR/$name/.kchain/rules.d" ]; then
        for i in `run-parts --list "$MOUNTDIR/$name/.kchain/rules.d" `; do
            PATH="$PATH:$kchain_path" $i
        done
    fi
    echo "activated $MOUNTDIR/$name" >&2
}

function remove {
    set -x
    name="$1"; uuid="$2"
    # ignore foreign devices
    grep -qs "$uuid $name" $CACHEDIR/dev || return
    # run clean up
    $kchain_path/lock-key "$name"
    tmpf=$(mktemp)
    grep -qv "$uuid $name" $CACHEDIR/dev >"$tmpf"
    mv "$tmpf" "$CACHEDIR/dev"
    echo "deactivated $MOUNTDIR/$name" >&2
}

inotifywait -qm -e create -e delete /dev/disk/by-uuid |
  while read dir signal uuid; do
      name=$(grep -s "$uuid" /etc/kchain.keys $HOME/.kchain.keys kchain.keys | awk '{print $2}')
      [[ -z "$name" ]] && continue
      case "${signal}" in
         CREATE) add "$name" "$uuid";;
         DELETE) remove "$name" "$uuid";;
      esac
  done
