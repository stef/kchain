#!/usr/bin/ksh
#    This file is part of kchain

#    kchain is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    kchain is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with kchain.  If not, see <http://www.gnu.org/licenses/>.

# (C) 2012 by Stefan Marsiske, <stefan.marsiske@gmail.com>

# depends on pmount, dbus-monitor


LABEL=keys
MOUNTDIR=/media/$LABEL
kchain_path="$(realpath ${0%/*})"

source ~/.kchainrc 2>/dev/null
source .kchainrc 2>/dev/null

function add {
    read object
    object="${object##*/}"
    object="${object%\"}"
    [[ -e '/dev/ukey' ]] || return
    # only check devices, not partitions
    [[ "/dev/$object" -ef "/dev/ukey" ]] || return
    # our stick?
    # is it already mounted?
    mountpoint -q "$MOUNTDIR" && return
    # try to cryptsetup, retry once
    SUDO_ASKPASS=/usr/bin/ssh-askpass sudo -A sh -c "ssh-askpass 'Enter key for unlocking USB' | cryptsetup luksOpen /dev/ukey ukey" ||
       SUDO_ASKPASS=/usr/bin/ssh-askpass sudo -A sh -c "ssh-askpass 'Enter key for unlocking USB' | cryptsetup luksOpen /dev/ukey ukey" ||
       return
    # needed for cleanup
    realpath /dev/ukey >"$CACHEDIR/dev"
    pmount -t ext2 -r /dev/mapper/ukey $LABEL || {
        # something failed, close down luks device
        sudo /sbin/cryptsetup luksClose ukey
        return
    }
    if [ -d "$MOUNTDIR/.kchain/rules.d" ]; then
        for i in `run-parts --list "$MOUNTDIR/.kchain/rules.d" `; do
            PATH="$PATH:$kchain_path" $i
        done
    fi
}

function remove {
    read object
    object="${object##*/}"
    object="${object%\"}"
    # ignore foreign devices
    [[ "/dev/$object" == "$(cat $CACHEDIR/dev)" ]] || return
    # run clean up
    $kchain_path/lockkey
}

dbus-monitor --system "type='signal',interface='org.freedesktop.UDisks'" |
  while read signal; do
       case "${signal}" in
         *member=DeviceAdded) add;;
         *member=DeviceRemoved) remove ;;
     esac
  done
